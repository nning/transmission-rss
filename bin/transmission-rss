#!/usr/bin/env ruby

require 'getoptlong'
require 'etc'

$:.unshift(File.dirname(__FILE__) + '/../lib')
require 'transmission-rss'

include TransmissionRSS

# Default config file path.
config_file   = '/etc/transmission-rss.conf'
custom_config = false

# Change default config file path on BSD.
if bsd?
  config_file = '/usr/local' + config_file
end

# Do not fork by default.
dofork = false

# Do not run single time by default.
dosingle = false

# No PID file by default.
pid_file = false

# Seen file not reset by default.
reset_seen_file = false

# Shows a summary of the command line options.
def usage_message(config_file)
  $stderr << "#{File.basename $0} [options]
Adds torrents from rss feeds to transmission web frontend.

  -c <file>   Custom config file path. Default: #{config_file}
  -f          Fork into background after startup.
  -s          Single run mode.
  -h          This help.
  -p <file>   Write PID to file.
  -r          Reset seenfile on startup.
  -v          Show program version and exit.

"
  exit(1)
end

# Define command-line options.
options = GetoptLong.new \
  ['-c', GetoptLong::REQUIRED_ARGUMENT],
  ['-f', GetoptLong::NO_ARGUMENT],
  ['-s', GetoptLong::NO_ARGUMENT],
  ['-h', GetoptLong::NO_ARGUMENT],
  ['-p', GetoptLong::REQUIRED_ARGUMENT],
  ['-r', GetoptLong::NO_ARGUMENT],
  ['-v', GetoptLong::NO_ARGUMENT]

# Parse given options.
options.each do |option, argument|
  case option
    when '-c'
      config_file   = argument
      custom_config = true
    when '-f'
      dofork = true
    when '-s'
      dosingle = true
    when '-h'
      usage_message(config_file)
    when '-p'
      pid_file = argument
    when '-r'
      reset_seen_file = true
    when '-v'
      puts TransmissionRSS::VERSION
      exit
  end
end

# Module prefix seems to be necessary when called from gem installation.
# Otherwise Config is somehow mixed up with RbConfig.
config = TransmissionRSS::Config.instance

# Initialize a log instance and configure it.
log = Log.instance

# Load config file (default or given by argument).
begin
  config.load(config_file)
  log.target = config.log.target
  log.level  = config.log.level
rescue Errno::ENOENT
  log.error(config_file + ' not found')
end

# Unless a custom config is given as an argument from command line or HOME is
# unset, check for user configuration and load if existing.
if !(custom_config || ENV['HOME'].nil?)
  prefix = ENV['XDG_CONFIG_HOME'] || File.expand_path('~/.config')
  path   = File.join(prefix, 'transmission-rss', 'config.yml')

  if File.exist?(path)
    log.debug('loading user config ' + path)
    config.load(path)
  end
end

# Print current config.
log.info('transmission-rss ' + VERSION)
log.debug(config)

# Fork value from command line.
config.fork = dofork if dofork

# Run a single time.
config.single = dosingle if dosingle

# PID file path from command line.
config.pid_file = pid_file if pid_file

# Drop privileges, if section is given in config file.
unless config.privileges.empty?
  Process::Sys.setgid \
    Etc.getgrnam(config.privileges.group).gid

  Process::Sys.setuid \
    Etc.getpwnam(config.privileges.user).uid

  log.debug \
    'dropped privileges ' +
    config.privileges.user +
    ':' +
    config.privileges.group
else
  user = Etc.getpwuid(Process.euid).name
  log.debug('no privilege dropping, running as user ' + user)
end

# Warn if no feeds are given.
log.warn('no feeds given') if config.feeds.empty?

# Connect reload of config file to SIGHUP.
trap 'HUP' do
  config.load(config_file) rescue nil
end

# Initialize feed aggregator.
aggregator = Aggregator.new(config.feeds, seen_file: config.seen_file)

if reset_seen_file
  aggregator.seen.clear!
  log.debug('seenfile reset')
end

# Initialize communication to transmission.
client = Client.new(config.server, config.login, config.client)

# Callback for a new item on one of the feeds.
aggregator.on_new_item do |torrent_file, feed, download_path|
  client.add_torrent(torrent_file, :url,
    paused: config.add_paused,
    download_dir: download_path,
    seed_ratio_limit: feed.config.seed_ratio_limit,
    labels: feed.config.labels)
end

# Callback for changes to the config.
config.on_change do
  aggregator.reinitialize!(config.feeds, seen_file: config.seen_file)

  if reset_seen_file
    aggregator.seen.clear!
    log.debug('seenfile reset after config change')
  end
end

# Start the aggregation process.
begin
  if config.fork
    pid = fork { aggregator.run(config.update_interval) }
    log.debug('forked ' + pid.to_s)

    # Save PID.
    if config.pid_file
      log.debug('wrote pid to ' + config.pid_file)
      File.write(config.pid_file, pid)
    end
  elsif config.single
    aggregator.run(-1)
  else
    log.debug('pid ' + Process.pid.to_s)

    # Save PID.
    if config.pid_file
      log.debug('wrote pid to ' + config.pid_file)
      File.write(config.pid_file, Process.pid)
    end

    aggregator.run(config.update_interval)
  end
rescue Interrupt
  log.info('interrupt caught')
end

log.close
